---
PRIORITY LEGEND:
[P1] - Highest Priority: Must be done first. The app is blocked without it.
[P2] - High Priority: Core application functionality.
[P3] - Medium Priority: Important features for usability.
[P4] - Low Priority: Enhancements and polish.
---
###################################################
BACKEND TASKS 
###################################################

=== PHASE 1: DATABASE & AUTHENTICATION ===
[P1] Task: Set up the database in MySQL Workbench.
- Description: Use the final SQL script to create the 'Users' and 'Transactions' tables.
- Status: DONE

[P1] Task: Set up the Python backend project structure.
- Description: Choose a framework (Flask is recommended for speed) and create the initial file structure (app.py, etc.).
- Status: DONE

[P1] Task: Create the User Registration API endpoint (/register).
- Description: Receives user data (username, email, password), hashes the password, and saves the new user to the database.
- Status: DONE

[P1] Task: Create the User Login API endpoint (/login).
- Description: Receives user credentials, verifies them against the database, and returns a success/failure response (e.g., a token).
- Status: DONE

=== PHASE 2: CORE TRANSACTION LOGIC ===
[P2] Task: Create the "Add Transaction" API endpoint (/transactions).
- Description: A POST request that receives all transaction details from the frontend and saves them to the 'Transactions' table.
- Status: TO DO

[P2] Task: Create the "Get All Transactions" API endpoint (/transactions).
- Description: A GET request that fetches all transactions for the currently logged-in user and sends them to the frontend.
- Status: TO DO

[P3] Task: Create the "Update Transaction" API endpoint (/transactions/<id>).
- Description: A PUT/PATCH request to update the details of a specific transaction.
- Status: TO DO

[P3] Task: Create the "Delete Transaction" API endpoint (/transactions/<id>).
- Description: A DELETE request to remove a specific transaction from the database.
- Status: TO DO

###################################################
FRONTEND TASKS 
###################################################

=== PHASE 1: CONNECTING AUTH & BUILDING THE DASHBOARD ===
[P2] Task: Connect Login/Sign-in pages to the backend APIs.
- Description: Use JavaScript fetch() to send user input from the existing HTML forms to the /login and /register endpoints. Handle success and error messages.
- Status: DONE

[P1] Task: Create the main Dashboard page.
- Description: Design and build the HTML/CSS for the main page a user sees after logging in. It should include a summary section, a transaction list area, and an "Add Transaction" button.
- Status: TO DO

=== PHASE 2: DISPLAYING & MANAGING DATA ===
[P2] Task: Fetch and display transactions on the dashboard.
- Description: On page load, call the backend's "Get All Transactions" API and use the data to dynamically populate the transaction list.
- Status: TO DO

[P2] Task: Create the "Add Transaction" form/modal.
- Description: Build the HTML form that allows users to input details for a new transaction.
- Status: TO DO

[P2] Task: Connect the "Add Transaction" form to the backend.
- Description: Use JavaScript fetch() to send the form data to the "Add Transaction" API endpoint. Refresh the transaction list on success.
- Status: TO DO

[P3] Task: Implement the "Edit" and "Delete" functionality.
- Description: Add buttons to each transaction in the list. Clicking them should allow the user to either delete the transaction (by calling the DELETE API) or edit it (by re-using the transaction form).
- Status: TO DO

=== PHASE 3: VISUALIZATIONS & ENHANCEMENTS ===
[P3] Task: Create a data summary section.
- Description: Display key numbers like 'Total Income', 'Total Expense', and 'Current Balance' by calculating from the fetched transaction data.
- Status: TO DO

[P4] Task: Add a chart for spending by category.
- Description: Integrate a library like Chart.js. Process the transaction data to create a pie or bar chart showing where money is being spent.
- Status: TO DO